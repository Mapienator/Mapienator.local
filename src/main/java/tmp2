import net.dv8tion.jda.api.JDABuilder;
import net.dv8tion.jda.api.OnlineStatus;
import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.events.guild.voice.GuildVoiceJoinEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.guild.GuildMessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.managers.AudioManager;
import net.dv8tion.jda.api.requests.GatewayIntent;

import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.security.auth.login.LoginException;

import net.dv8tion.jda.api.utils.cache.CacheFlag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Scanner;


public class Main extends ListenerAdapter {
    public static void main(String[] args) throws LoginException {
        String token = args[0];

        EnumSet<GatewayIntent> intents = EnumSet.of(
                GatewayIntent.GUILD_MESSAGES,
                GatewayIntent.GUILD_VOICE_STATES
        );

        JDABuilder.createLight(token, intents)
                .addEventListeners(new Main())
                .setActivity(Activity.watching("Cabbage Grow"))
                .setStatus(OnlineStatus.ONLINE)
                .enableCache(CacheFlag.VOICE_STATE)
                .build();

        Logger logger = LoggerFactory.getLogger(Main.class);
        logger.info("This is how you configure Java Logging with SLF4J");

    }

    @Override
    public void onGuildMessageReceived(GuildMessageReceivedEvent event) {

        Message message = event.getMessage();
        User author = message.getAuthor();
        String content = message.getContentRaw();
        Guild guild = event.getGuild();

        if (!event.getAuthor().isBot()) {
            if (content.startsWith("voice")) {
                onEchoCommand(event);
            }
        }
    }

    private void onEchoCommand (GuildMessageReceivedEvent event){
        Member member = event.getMember();
        GuildVoiceState voiceState = member.getVoiceState();
        VoiceChannel channel = voiceState.getChannel();
        System.out.println(member);
        System.out.println(voiceState);
        System.out.println(channel);
        if (channel != null){
            System.out.println("Test 2");
            connectTo(channel);
            onConnecting(channel,event.getChannel());
        }       else
        {
            onUnknownChannel(event.getChannel(), "your voice channel"); // Tell the user about our failure
            }

    }


    private void onConnecting(VoiceChannel channel, TextChannel textChannel) {
        textChannel.sendMessage("Connecting to " + channel.getName()).queue(); // never forget to queue()!
    }
    private void onUnknownChannel(MessageChannel channel, String comment)
    {
        channel.sendMessage("Unable to connect to ``" + comment + "``, no such channel!").queue(); // never forget to queue()!
    }

    private void connectTo(VoiceChannel channel) {
        Guild guild = channel.getGuild();
        AudioManager audioManager = guild.getAudioManager();
        //EchoHandler handler = new EchoHandler();

        //audioManager.setSendingHandler(handler);
        //audioManager.setReceivingHandler(handler);
        audioManager.openAudioConnection(channel);
    }


}
